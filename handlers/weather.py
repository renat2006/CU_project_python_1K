from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from api.weather_api import WeatherAPI
from keyboards.inline import get_inline_keyboard, get_days_keyboard
from data.config import WEATHER_API_KEY, LANGUAGE
from visualizations.plot import (
    create_combined_temperature_plot,
    create_combined_humidity_plot,
    create_combined_rainfall_plot,
)
from aiogram.types.input_file import BufferedInputFile
from datetime import datetime
import locale

locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")

router = Router()
weather_api = WeatherAPI(api_key=WEATHER_API_KEY, language=LANGUAGE)

class WeatherFSM(StatesGroup):
    start_location = State()
    end_location = State()
    days_selection = State()
    confirm_route = State()

def format_date(date_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ ISO-—Ñ–æ—Ä–º–∞—Ç–∞ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    date = datetime.strptime(date_str[:10], "%Y-%m-%d")
    return date.strftime("%d %B")

def format_forecast(data, city_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."""
    forecast_text = f"üìç –ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}\n"
    for day in data:
        date = format_date(day['date'])
        forecast_text += (
            f"üìÖ {date}:\n"
            f"üå°Ô∏è –ú–∞–∫—Å: {day['temperature_max']}¬∞C | –ú–∏–Ω: {day['temperature_min']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {day['humidity']}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {day['wind_speed']} –∫–º/—á\n"
            f"‚òî –î–æ–∂–¥—å: {day['rain_probability']}%\n\n"
        )
    return forecast_text

@router.message(Command("weather"))
async def cmd_weather(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ üèÅ:")
    await state.set_state(WeatherFSM.start_location)

@router.message(WeatherFSM.start_location)
async def process_start_location(message: types.Message, state: FSMContext):
    await state.update_data(start_location=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ üéØ:")
    await state.set_state(WeatherFSM.end_location)

@router.message(WeatherFSM.end_location)
async def process_end_location(message: types.Message, state: FSMContext):
    await state.update_data(end_location=message.text)
    await message.answer(
        "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑? (1-5 –¥–Ω–µ–π) üìÖ",
        reply_markup=get_days_keyboard()
    )
    await state.set_state(WeatherFSM.days_selection)

@router.callback_query(lambda call: call.data.isdigit())
async def select_days(call: types.CallbackQuery, state: FSMContext):
    days = int(call.data)
    await state.update_data(days=days)
    data = await state.get_data()
    start = data['start_location']
    end = data['end_location']
    await call.message.answer(
        f"üåç –í–∞—à –º–∞—Ä—à—Ä—É—Ç:\n"
        f"üîπ –ù–∞—á–∞–ª–æ: <b>{start}</b>\n"
        f"üîπ –ö–æ–Ω–µ—Ü: <b>{end}</b>\n"
        f"üîπ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞: <b>{days} –¥–Ω–µ–π</b>\n\n"
        f"‚úÖ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
        reply_markup=get_inline_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(WeatherFSM.confirm_route)

@router.callback_query(lambda call: call.data == "confirm")
async def confirm_route(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    start_city = data['start_location']
    end_city = data['end_location']
    days = data['days']

    try:

        start_autocomplete = await weather_api.get_cities_autocomplete(start_city)
        end_autocomplete = await weather_api.get_cities_autocomplete(end_city)

        if not start_autocomplete or not end_autocomplete:
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        start_location_key = start_autocomplete[0]['Key']
        end_location_key = end_autocomplete[0]['Key']

        start_forecast = await weather_api.get_forecast_daily(5, start_location_key)
        end_forecast = await weather_api.get_forecast_daily(5, end_location_key)

        start_forecast = start_forecast[:days]
        end_forecast = end_forecast[:days]

        start_text = format_forecast(start_forecast, start_city)
        end_text = format_forecast(end_forecast, end_city)

        combined_temp_plot = create_combined_temperature_plot(
            start_forecast, end_forecast, start_city, end_city
        )
        combined_humidity_plot = create_combined_humidity_plot(
            start_forecast, end_forecast, start_city, end_city
        )
        combined_rainfall_plot = create_combined_rainfall_plot(
            start_forecast, end_forecast, start_city, end_city
        )

        combined_temp_file = BufferedInputFile(combined_temp_plot.getvalue(), filename="combined_temp.png")
        combined_humidity_file = BufferedInputFile(combined_humidity_plot.getvalue(), filename="combined_humidity.png")
        combined_rainfall_file = BufferedInputFile(combined_rainfall_plot.getvalue(), filename="combined_rainfall.png")

        await call.message.answer_photo(photo=combined_temp_file, caption="üå°Ô∏è –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        await call.message.answer_photo(photo=combined_humidity_file, caption="üíß –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏")
        await call.message.answer_photo(photo=combined_rainfall_file, caption="‚òî –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤")
        await call.message.answer(f"{start_text}\n{end_text}", parse_mode="HTML")
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()

@router.message()
async def unknown_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await message.answer(
        "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
        "üìå <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /weather ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "‚Ä¢ /help ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üòä",
        parse_mode="HTML"
    )
